// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// Enums

enum UserStatus {
  active
  inactive
}

enum MeetingStatus {
  started
  planned
  ended
  cancelled
}

enum MeetingPresence {
  present
  absent
  unknown
}

// Models

model User {
  id           Int               @id @default(autoincrement())
  status       UserStatus        @default(active)
  email        String            @unique
  firstName    String
  lastName     String
  roles        UserRole[]
  meetings     MeetingAttendee[] @relation(name: "MeetingAttendeeUser")
  procurations MeetingAttendee[] @relation(name: "MeetingAttendeeProcurer")
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String
  userRole  UserRole[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Meeting {
  id          Int               @id @default(autoincrement())
  status      MeetingStatus     @default(planned)
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  location    String?
  url         String?
  attendees   MeetingAttendee[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
}

model MeetingAttendee {
  id         Int             @id @default(autoincrement())
  meetingId  Int
  meeting    Meeting         @relation(fields: [meetingId], references: [id])
  userId     Int
  user       User            @relation(name: "MeetingAttendeeUser", fields: [userId], references: [id])
  presence   MeetingPresence @default(unknown)
  procurerId Int?
  procurer   User?           @relation(name: "MeetingAttendeeProcurer", fields: [procurerId], references: [id])
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt
}
